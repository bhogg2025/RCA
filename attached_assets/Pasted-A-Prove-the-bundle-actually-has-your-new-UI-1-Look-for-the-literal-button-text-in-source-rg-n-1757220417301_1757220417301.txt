A) Prove the bundle actually has your new UI
# 1) Look for the literal button text in source
rg -n --hidden -S "Add AI Provider" client/src || echo "NOT FOUND in source"

# 2) If you’re serving a built app, prove the text is in the built JS
rg -n --hidden -a -S "Add AI Provider" dist/ || echo "NOT FOUND in dist bundle"

# 3) If using Vite dev server, skip step 2 and just do a hard reload with 'Disable cache' in DevTools
•	Not found in source → the UI was never added. Jump to section D to drop in a minimal working UI.
•	Found in source but not in dist → rebuild: rm -rf dist node_modules/.vite && npm run build && npm run start.
 
B) Confirm the page actually renders your component
# Check route wiring
rg -n -S "admin-settings|AI Settings|AiSettings" client/src/App.tsx client/src/router* client/src/pages

# Quick probe: insert this at the TOP of your AI settings page component and rebuild
# (You can remove it after)
console.log("[AIPROV] AdminSettings component mounted");
•	Open the page and watch the browser console.
o	If you don’t see [AIPROV] ... mounted, the route isn’t mapped.
Fix (example with React Router v6):
// client/src/App.tsx
import AdminSettings from "./pages/admin-settings";

<Routes>
  <Route path="/" element={<Home />} />
  <Route path="/admin-settings" element={<AdminSettings />} />
</Routes>
•	Also make sure you’re visiting the correct URL (e.g., /admin-settings, not /admin/settings) and that SPA rewrite is enabled so refreshing doesn’t 404.
________________________________________
C) Your new /api/meta version-gating may be hiding the UI
If you added gating like:
if (meta.apiVersion !== "ai-settings-v1") return <RedBanner />;
…that will prevent the UI from rendering if the backend and FE disagree for any reason.
Temporary fix (do this now):
// Instead of returning early, show the banner but still render the UI
const mismatch = meta && meta.apiVersion !== "ai-settings-v1";

return (
  <>
    {mismatch && <div className="banner-red">Version mismatch</div>}
    <AiProvidersPanel />   {/* <-- still renders */}
  </>
);
Then, make sure your backend returns the expected version:
// server/routes.ts
app.get("/api/meta", (req, res) => {
  res.json({ apiVersion: "ai-settings-v1", git: process.env.GIT_SHA || "dev" });
});
Restart the server after changing routes.
________________________________________
D) (If needed) Drop in a minimal UI so the button definitely appears
Create/replace client/src/pages/admin-settings.tsx with this minimal, universal version (free-text provider & model, no hardcoding):
import { useEffect, useState } from "react";

type ProviderRow = { id: number; provider: string; model_id: string; is_active: boolean; created_at?: string };

export default function AdminSettings() {
  const [rows, setRows] = useState<ProviderRow[]>([]);
  const [provider, setProvider] = useState("");
  const [model, setModel] = useState("");
  const [apiKey, setApiKey] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const load = async () => {
    const r = await fetch("/api/ai/providers");
    setRows(await r.json());
  };

  useEffect(() => { load(); }, []);

  const add = async () => {
    setLoading(true); setError(null);
    try {
      const r = await fetch("/api/ai/providers", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ provider, model_id: model, api_key: apiKey })
      });
      if (!r.ok) throw new Error(await r.text());
      setProvider(""); setModel(""); setApiKey("");
      await load();
    } catch (e:any) { setError(e.message || "Add failed"); }
    finally { setLoading(false); }
  };

  const activate = async (id:number) => { await fetch(`/api/ai/providers/${id}/activate`, { method:"POST" }); await load(); };
  const testRow  = async (id:number) => { const r = await fetch(`/api/ai/providers/${id}/test`, { method:"POST" }); alert((await r.json()).message || "Test done"); };
  const del      = async (id:number) => { await fetch(`/api/ai/providers/${id}`, { method:"DELETE" }); await load(); };

  return (
    <div style={{display:"grid", gap:24, gridTemplateColumns:"1fr 1.4fr"}}>
      <div>
        <h2>AI Settings</h2>
        <label>Provider<br/><input value={provider} onChange={e=>setProvider(e.target.value)} placeholder="openai / anthropic / google"/></label><br/>
        <label>Model ID<br/><input value={model} onChange={e=>setModel(e.target.value)} placeholder="gpt-4o-mini / claude-3-sonnet"/></label><br/>
        <label>API Key<br/><input type="password" value={apiKey} onChange={e=>setApiKey(e.target.value)} placeholder="sk-..."/></label><br/>
        <button onClick={add} disabled={loading || !provider || !model || !apiKey}>Add AI Provider</button>
        {error && <div style={{color:"crimson", marginTop:8}}>{error}</div>}
      </div>

      <div>
        <h3>Current AI Providers</h3>
        {rows.length === 0 ? (
          <div>No AI providers configured. Add one to get started.</div>
        ) : (
          <table border={1} cellPadding={8} style={{width:"100%"}}>
            <thead><tr><th>Provider</th><th>Model</th><th>Active</th><th>Created</th><th>Actions</th></tr></thead>
            <tbody>
              {rows.map(r=>(
                <tr key={r.id}>
                  <td>{r.provider}</td>
                  <td>{r.model_id}</td>
                  <td>{r.is_active ? "Yes" : "No"}</td>
                  <td>{r.created_at?.slice(0,19).replace("T"," ") || "-"}</td>
                  <td>
                    <button onClick={()=>activate(r.id)}>Set Active</button>{" "}
                    <button onClick={()=>testRow(r.id)}>Test</button>{" "}
                    <button onClick={()=>del(r.id)}>Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}
Then ensure it’s routed (example):
// client/src/App.tsx
import AdminSettings from "./pages/admin-settings";
<Routes>
  <Route path="/admin-settings" element={<AdminSettings />} />
</Routes>
Rebuild/restart, hard-reload the page with “Disable cache”.
 
Quick verdict flow
•	Button text missing from bundle → UI was never built/linked → apply section D and rebuild.
•	Component not mounting → fix route (B).
•	Banner shows version mismatch & no UI → adjust gating to still render (C).
•	All above good but data not refreshing → after POST, call GET /api/ai/providers and set state

