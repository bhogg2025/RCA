BLOCKER 1 — Add the API Key input to the main form
•	In client (Admin → AI Settings form component), add a password input labeled “API Key” next to Provider + Model ID.
•	On Save Settings, POST to /api/admin/ai/providers with body:
•	{ "provider": "<lowercase>", "modelId": "<string>", "apiKey": "<string>", "setActive": <bool> }
•	After 200/201, clear the API Key field (do not re-fill from server), then refresh the providers list.
•	Disable Test Key until the selected row has hasKey === true.
BLOCKER 2 — Fix “Failed to create provider” in quick-add
•	The lower “AI Provider Management” quick-add currently has only Provider + Model ID and posts without apiKey, which fails.
•	Do one of the following (pick exactly one to keep single-source-of-truth):
o	Option A (preferred): Remove/disable the quick-add row entirely and show helper text: “Create providers using the form above (requires API Key).”
o	Option B: Add a password ‘API Key’ field to the quick-add row and post the same payload as the main form.
Frontend specifics
•	Normalize provider to lowercase on submit (openai, anthropic, google).
•	On error, surface the server error message from JSON (e.g., MISSING_API_KEY, INVALID_PROVIDER) instead of a generic “Failed to create provider”.
•	In the providers table, display columns: Provider | Model | Active | 🔒 Key (show “Yes/No”, never the key).
•	Add a “Set Active” action that PATCHes /api/admin/ai/providers/:id with { setActive: true }.
Backend specifics (ensure these exist and work)
•	POST /api/admin/ai/providers:
o	Validate: required provider, modelId, apiKey (non-empty).
o	Lowercase provider; check allowlist.
o	Encrypt apiKey with AES-256-GCM using CRYPTO_KEY_32; store ciphertext, iv, tag.
o	If setActive, set others inactive (single active constraint).
o	Return: { id, provider, modelId, active, hasKey: true } (never return the key).
•	GET /api/admin/ai/providers: return array of { id, provider, modelId, active, hasKey }.
•	PATCH /api/admin/ai/providers/:id: accept optional modelId, apiKey, setActive (re-encrypt on new key).
•	POST /api/admin/ai/providers/:id/test: decrypt stored key, call provider “ping” for the modelId, respond { ok, latencyMs, message }.
•	Return clear 400 errors with codes/messages for missing fields and invalid provider.
Acceptance checks (agent must self-verify)
1.	Main form shows API Key (password); after Save, it clears; table shows 🔒 “Yes”.
2.	You can Test Key and get a real result (success or clear failure).
3.	Exactly one active provider at a time.
4.	Network responses never contain plaintext keys; GET /providers only has hasKey.
5.	Quick-add is either removed/disabled or collects apiKey too (and works).

